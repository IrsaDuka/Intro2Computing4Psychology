# -*- org-link-file-path-type: relative; -*-
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: Working With Data in Python
#+date: <2023-02-09 Thu>
#+author: Britt Anderson
#+email: britt@uwaterloo.ca
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.2 (Org mode 9.6-pre)
#+bibliography: /home/britt/gitRepos/Intro2Computing4Psychology/chapters/i2c4p.bib
#+cite_export: csl assets/chicago-note-bibliography-16th-edition.csl

* Working with Data in Python
For a long time data handling and graph production in python lagged behind that of R. Data were collected in comma or tab separated ([[https://en.wikipedia.org/wiki/Comma-separated_values][CSV]]) formats or often in [[https://docs.python.org/3/library/pickle.html][pickle]] files. Pickled data was textual data converted to a binary representation and had to be converted back to be read. These issues made it harder to use python in an interactive and interpreted environment for data analysis and many workers in psychology would collect their data with experiments coded in python (or other languages), and then use R as the language for statistical testing.

However, over the last few years the scientific python community has expanded its options for both graphing and data handling markedly, and working entirely in python is increasingly a viable option. The most widely used python library for handling data is [[https://pandas.pydata.org/][Pandas]]. In many respects it has a similar look and feel to the =data.frame= style of data analysis used in R. However, there are definite syntactic and implementation differences. While a familiarity with R and data.frames is a good base for beginning to use Pandas there will remain a lot of concrete specfics to learn to use python effectively. In this topic a few of the pandas basics are demonstrated. In addition to the illustrations here, there are numerous online tutorials and blogs that explain pandas in more detail, and with many more examples.

#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/462705773?h=1b5d393026" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/462705773">Ia : Intro to Using Pandas (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>This module gives an overview of using python to request data via the internet; unzip a data file; and load that data into python with pandas for exploratory analysis.</p>
#+end_export

** Some additional sources  
*** Pandas Books
    - [[https://www.chapters.indigo.ca/en-ca/books/python-for-data-analysis-data/9781449319793-item.html][Python for Data Analysis]] - This book is available for online reading to University of Waterloo students.
*** Blogs
    - [[https://pandas.pydata.org/pandas-docs/stable/getting_started/tutorials.html][Community Tutorials]]
    - [[https://www.learnpython.org/en/Pandas_Basics][Learn Python]]
** Data handling in Python

#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/462705737?h=8f04df6247" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/462705737">Ib : Installing Pandas (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>There are several methods for installing Pandas. In this video I demonstrate one of the: using pip</p>
#+end_export
*** Pandas
    How to get Pandas?
    1. [[https://docs.continuum.io/anaconda/][Anaconda]] (Conda) - you will see this in a lot of documentation. This is a collection of packages for python that are curated to work well together and allow you to set up virtual environments (which protects your projects and their differing requirements from leading to conflicts with each other). Using =conda= is not hard, but it is another tool, and it has its own learning curve, so it will not be used here. If you find yourself using python regularly and you are comfortable with how to install and use software and packages then I encourage you to read more about Anaconda and decided if it is a python solution that will work for you.
    2. Xubuntu stable ~sudo apt-get install python3-pandas~.
    3. Pip (PyPI) ~pip3 install pandas~

To try and get all our python packages from one source (and thereby reduce our chance for conflicts) we will use the =pip= method as that will work well with our subsequent installation of the =psychopy= package.
*** Interactive Pandas
Python is an interpreted language. You can use Python from an interpreter much as you used R in an R console (or RStudio).
*** Getting Your Data Into Python
#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/462705724?h=dc0c22cba8" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/462705724">Ic : Using Python to Request Data from the Internet (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>This video demonstrates some of the steps below for getting data from Python. It uses the requests library.</p>
#+end_export

     Before you can get data into python, you have to get data.

There are a large number of sources for data online that you can use to explore different tools and analyses.
     1. [[https://openpsychometrics.org/_rawdata/][Open Psychometrics]]
     2. [[https://www.apa.org/research/responsible/data-links][Data Links from the APA]]
     3. [[https://data.world/datasets/psychology][Data World]]
     4. [[https://www.kaggle.com/tags/psychology][The Kaggle Competition]]
	Kaggle competitions allow you to make data analysis a competitive sport.

For demonstration purposes we will get data from the Open Psychometrics project (I am using the humor styles questionnaire). You could just go to the website and right click and download, but you could also use python to get the data. There are many methods for this and the one used here came from this [[https://www.simplifiedpython.net/python-download-file/][online post.]]

You will have to ~pip3 install requests~ to get the requests library

Then you will want to be in the directory where you want the file to download. I am using a ~:session:~ in order to allow variables to persist across babel code blocks. 

     
     #+begin_src python :session *dataPython* 
       import requests
       url = "http://openpsychometrics.org/_rawdata/HSQ.zip"
       r = requests.get(url)
       filename = url.split('/')[-1] # -1 gets us the last item of a list, in this case the filenamel
       with open(filename,'wb') as output_file:
	   output_file.write(r.content)
     #+end_src

#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/462705656?h=a84dbf071f" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/462705656">Id : How to Use Python Unzip functions (12c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>Using the python unzip library.</p>
#+end_export
     
This file is a "zip" file. For a zip file the data have been compressed to save space. There are many other compression types available. Tar is fairly common. Rar is rare. Python also has facilities to unzip files.  Why bother using all these tools rather than doing everything manually? Well, for one thing you could script it. Why waste your time clicking random buttons. Let the computer do the work. 

     #+begin_src python :session *dataPython*
       import zipfile
       with zipfile.ZipFile('./HSQ.zip', 'r') as zip_ref:
	   zip_ref.extractall('.') ; # what does "." mean in this context?
     #+end_src


#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/462705437?h=931966f828" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/462705437">Ie : Getting Data into Pandas (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>Reading in a csv data file to a python interactive session with Pandas.</p>
#+end_export
     
     #+begin_src python
    You have to import pandas to use it. 
    #+begin_src python :session *dataPython* :results value
      import pandas as pd
      dpd = pd.read_csv("./HSQ/data.csv")
      dpd.columns.values
    #+end_src

*** Repeating Things We Did In R With Pandas
**** The length of a list
      In R you would use the ~length~ command, but in python it is ~len~. Almost every language you will program in will have a command for finding the length, but the actual word may be different or the syntax may be different.
      
      #+begin_src python :session *dataPython* 
      len(dpd['Q1'])
      #+end_src

**** Using a Conditional
      In R we did things like ~mydataframe$mydatacol~ to get a column of data from a data frame. In python the format looks more like a python dictionary.
      
      #+begin_src python :session *dataPython*
      dpdmg = dpd.copy()
      dpdmg = dpdmg[dpdmg['gender'].isin([1,2])]
      len(dpdmg['Q1'])
      #+end_src

      What happens if you just select with ~in~? You keep the same number of rows, because you replace the ineligible data with NaNs (not a number). 

*** Functional Styles versus Object Orientation
Python is an object oriented language. R is in a more eclectic style that  reflects its LISP origins. Object oriented languages have data structures: objects, that encapsulate both attributes (what objects are like) and methods (what objects can do). A list would have its contents, the items in the list, as its attributes, but would have the ability, a method, to report the length of its /self/ [fn:4]. The attributes and methods of a python object are often accessed by a name that includes a *dot* '~.~' like the ".isin" you see in the code snippet above. Pandas creates a /data.frame object/ (the name emphasizes its R heritage), but it is not the same thing, and while most of the commands are achievable in either, they are not the same. The *dot* shows you we are accessing either an attribute or a method of an object. 

* Assessing Your Use of Pandas
** Task
  You will
  1. Download a data set in python
  2. Unzip the data set
  3. Tell me the names of all the columns
  4. Tell me the length of one of the rows
  5. And tell me the mean[fn:1] of one of the columns subset by rows[fn:2].

** Requirements
  Your submission will be either an org[fn:3] file with code blocks that let me execute each of these steps by myself interactively one at a time. Or a python script that I can run from the command line and that will perform each of these functions displaying its output to ~stdout~. Stdout is the linux name for printing to the screen in the terminal. For example, when you do ~ls~ to list the names of files in a directory you are directing to stdout. 
  
** Comments
  Don't start by writing this as a script. That will almost certainly be too hard. Begin by doing this interactively, perhaps at a python interpreter until you get the code for a particular step done corrrectly. Then copy that code to your file and and test that it still works; that something did not get messed up in the copying and pasting.
  Once you have the data in your interpreter, don't just rush through. Take some time to play with various pandas commands or exercises such as examples you can find [[https://www.w3resource.com/python-exercises/pandas/index-data-series.php][here]] to generally grow more familiar with the package.
* Footnotes

[fn:1] Or some other simple statistic appropriate to the data, e.g. if your data was /categorical/ you might give me the number of rows for each type of category.  
[fn:2] An example of this is that if you had columns for heights and genders you could output the average height of men, women, and other. 
[fn:3] To make some nicer formatting and help available when using python from within emacs checkout the ~elpy~ [[https://elpy.readthedocs.io/en/latest/introduction.html#installation][package]].
#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/462706049?h=3d1ebf93de" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/462706049">Ec : Installing the Elpy package (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>Installing the elpy package. A bit about installing packages in emacs generally, and a specific package to help with python code formatting and syntax.</p>
#+end_export
[fn:4] Self is in italics because this is the special name one often sees in object oriented code were the definition of an object is given. Self typically refers to the particular instance of an object as it is being made. 




